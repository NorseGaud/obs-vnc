name: Plugin Build

on: workflow_dispatch

env:
  artifactName: ${{ contains(github.ref_name, '/') && 'artifact' || github.ref_name }}
  qt: false

jobs:
  macos_build:
    runs-on: macos-13
    strategy:
      fail-fast: false
      matrix:
        include:
          - obs: 28
            arch: arm64
    defaults:
      run:
        shell: bash
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Environment
        id: setup
        run: |
          set -e
          echo '::group::Set up code signing'
          if [[ '${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}' != '' && \
                '${{ secrets.MACOS_SIGNING_CERT }}' != '' ]]; then
            echo '::set-output name=haveCodesignIdent::true'
          else
            echo '::set-output name=haveCodesignIdent::false'
          fi
          if [[ '${{ secrets.MACOS_NOTARIZATION_USERNAME }}' != '' && \
                '${{ secrets.MACOS_NOTARIZATION_PASSWORD }}' != '' ]]; then
            echo '::set-output name=haveNotarizationUser::true'
          else
            echo '::set-output name=haveNotarizationUser::false'
          fi
          echo '::endgroup::'

      - name: Install Apple Developer Certificate
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        uses: apple-actions/import-codesign-certs@253ddeeac23f2bdad1646faac5c8c2832e800071
        with:
          keychain-password: ${{ github.run_id }}
          p12-file-base64: ${{ secrets.MACOS_SIGNING_CERT }}
          p12-password: ${{ secrets.MACOS_SIGNING_CERT_PASSWORD }}

      - name: Set Signing Identity
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        run: |
          set -e
          TEAM_ID=$(echo "${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" | sed 's/.*(\([A-Za-z0-9]*\))$/\1/')
          xcrun notarytool store-credentials AC_PASSWORD \
            --apple-id "${{ secrets.MACOS_NOTARIZATION_USERNAME }}" \
            --team-id "$TEAM_ID" \
            --password "${{ secrets.MACOS_NOTARIZATION_PASSWORD }}"

      - name: Download obs-studio development environment
        id: obsdeps
        uses: norihiro/obs-studio-devel-action@v1-beta
        with:
          path: /tmp/deps-${{ matrix.obs }}-${{ matrix.arch }}
          arch: ${{ matrix.arch }}
          obs: ${{ matrix.obs }}
          verbose: true
          qt: ${{ env.qt }}

      - name: Install libvncserver
        run: |
          brew install libssh2
          export arch=${{ matrix.arch }}
          export deps=/tmp/deps-${{ matrix.obs }}-${{ matrix.arch }}
          ci/macos/install-libvncserver-${{ matrix.arch }}.sh

      - name: Build plugin
        run: |
          arch=${{ matrix.arch }}
          deps=/tmp/deps-${{ matrix.obs }}-${{ matrix.arch }}
          MACOSX_DEPLOYMENT_TARGET=${{ steps.obsdeps.outputs.MACOSX_DEPLOYMENT_TARGET }}
          OBS_QT_VERSION_MAJOR=${{ steps.obsdeps.outputs.OBS_QT_VERSION_MAJOR }}
          GIT_TAG=$(git describe --tags --always)
          PKG_SUFFIX=-${GIT_TAG}-obs${{ matrix.obs }}-macos-${{ matrix.arch }}
          export PKG_CONFIG_PATH=$deps/lib/pkgconfig:/usr/local/lib/pkgconfig/:$PKG_CONFIG_PATH # for arm64
          set -e
          case "${{ matrix.obs }}" in
            27)
              cmake_opt=()
              ;;
            28)
              cmake_opt=(
                -D MACOSX_PLUGIN_BUNDLE_TYPE=BNDL
              )
              ;;
          esac
          cmake -S . -B build -G Ninja \
            -D QT_VERSION=$OBS_QT_VERSION_MAJOR \
            -DCMAKE_BUILD_TYPE=RelWithDebInfo \
            -DCMAKE_PREFIX_PATH="$PWD/release/" \
            -DCMAKE_OSX_ARCHITECTURES=${arch/#universal/x86_64;arm64} \
            -DCMAKE_OSX_DEPLOYMENT_TARGET=${MACOSX_DEPLOYMENT_TARGET} \
            -DCMAKE_FRAMEWORK_PATH="$deps/Frameworks;$deps/lib/cmake;$deps" \
            -D PKG_SUFFIX=$PKG_SUFFIX \
            "${cmake_opt[@]}"
          cmake --build build --config RelWithDebInfo
          echo "PKG_SUFFIX='$PKG_SUFFIX'" >> ci/ci_includes.generated.sh

      - name: Prepare package
        run: |
          set -ex
          . ci/ci_includes.generated.sh
          cmake --install build --config RelWithDebInfo --prefix=release
          case ${{ matrix.obs }} in
            27)
              (cd release/${PLUGIN_NAME} && ../../ci/macos/change-rpath.sh -obs ${{ matrix.obs }} -lib lib/ bin/${PLUGIN_NAME}.so)
              cp LICENSE release/${PLUGIN_NAME}/data/LICENSE-$PLUGIN_NAME
              ;;
            28)
              (cd release/${PLUGIN_NAME}.plugin/Contents && ../../../ci/macos/change-rpath.sh -obs 28 -lib lib/ MacOS/${PLUGIN_NAME})
              cp LICENSE release/${PLUGIN_NAME}.plugin/Contents/Resources/LICENSE-$PLUGIN_NAME
              ;;
          esac

      - name: Codesign
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        run: |
          . ci/ci_includes.generated.sh
          set -e
          case ${{ matrix.obs }} in
            27)
              files=(
                $(find release/${PLUGIN_NAME}/ -name '*.dylib')
                release/${PLUGIN_NAME}/bin/${PLUGIN_NAME}.so
              )
              ;;
            28)
              files=(
                $(find release/${PLUGIN_NAME}.plugin/ -name '*.dylib')
                release/${PLUGIN_NAME}.plugin/Contents/MacOS/${PLUGIN_NAME}
              )
              ;;
          esac
          for dylib in "${files[@]}"; do
            codesign --force --sign "${{ secrets.MACOS_SIGNING_APPLICATION_IDENTITY }}" "$dylib"
          done
          for dylib in "${files[@]}"; do
            codesign -vvv --deep --strict "$dylib"
          done

      - name: Package
        run: |
          . ci/ci_includes.generated.sh
          set -ex
          zipfile=$PWD/package/${PLUGIN_NAME}${PKG_SUFFIX}.zip
          mkdir package
          case ${{ matrix.obs }} in
            27) (cd release/ && zip -r $zipfile ${PLUGIN_NAME}) ;;
            28) (cd release/ && zip -r $zipfile ${PLUGIN_NAME}.plugin) ;;
          esac
          ci/macos/install-packagesbuild.sh
          packagesbuild \
            --build-folder $PWD/package/ \
            build/installer-macOS.generated.pkgproj

      - name: Productsign
        if: ${{ github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        run: |
          . ci/ci_includes.generated.sh
          pkgfile=package/${PLUGIN_NAME}${PKG_SUFFIX}.pkg
          set -e
          . ci/ci_includes.generated.sh
          productsign --sign "${{ secrets.MACOS_SIGNING_INSTALLER_IDENTITY }}" $pkgfile package/${PLUGIN_NAME}-signed.pkg
          mv package/${PLUGIN_NAME}-signed.pkg $pkgfile

      - name: Notarize
        if: ${{ startsWith(github.ref, 'refs/tags/') && github.event_name != 'pull_request' && steps.setup.outputs.haveCodesignIdent == 'true' }}
        uses: norihiro/macos-notarize-action@v1
        with:
          path: package/*
          keychainProfile: AC_PASSWORD
          verbose: true

      - name: Upload build artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.artifactName }}
          path: package/*